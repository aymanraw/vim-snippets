# #include <...>
snippet Inc
	#include <${1:iostream}>${2}
# Header Include-Guard
snippet once
	#ifndef TAJGA_${1:`toupper(Filename('$1', 'UNTITLED'))`}_H_
	#define TAJGA_$1_H_

	${2}
	#endif // TAJGA_$1_H_

# STL
snippet map
	typedef std::map<${1:key}, ${2:T}> ${3:map_type};
	$3 ${4:map_name};${5}
snippet vector
	std::vector<${1:T}> ${2:name};${3}
snippet list
	std::list<${1:T}> ${2:name};${3}
snippet uniq
	std::unique_ptr<${1:T}> ${2:name};${3}
snippet mu
	std::make_unique<${1:T}>(${2})${3}
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
	${2}
	} // namespace $1

# Class
snippet cl

	class ${1:`Filename('$1', 'name')`}
	{
		$1($1 const &) = delete;
		$1 & operator= ($1 const &) = delete;

	public:
		$1();
		virtual ~$1();

	}; // class $1

snippet en
	enum class ${1:name} : ${2:int} {
		${3:kInvalid} = 0,${4}
		kCount
	}; // enum class $1
# For Loop
snippet for
	for (auto ${2:i} = 0; $2 < ${1:kCount}; ${3:++}$2) {
		${4:// code}
	}
# Custom For Loop
snippet forr
	for (auto ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
		${5:// code}
	}
# For Each
snippet fore
	for (${1:auto} ${2:i} : ${3:list}) {
		${4:// code}
	}
# Iteration
snippet iter
	for (auto ${1:i} = begin(${2:list}); $1 != end($2); ++$1) {
		${3:// code}
	}
# Swap idiom
snippet swap
	friend void swap(${1:T} & first, $1 & second)
	{
		using std::swap;

		swap(first.${2:x}, second.$2);
		swap(first.${3:y}, second.$3);
		swap(first.${4:z}, second.$4);${5}
	}
# Print
snippet Print
	std::ostream & Print(std::ostream & os) const
	{
		${1}
		return os;
	}
snippet <<
	std::ostream & operator<< (std::ostream & os, ${1:T} const & ${2:name})
	{
		return $2.Print(os);
	}${3}
