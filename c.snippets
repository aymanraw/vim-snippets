# main()
snippet main
	int main(int argc, char * argv[])
	{
		${1}
		return 0;
	}

# WinMain
snippet winmain
	int WINAPI WinMain(HINSTANCE instance, HINSTANCE prev_instance,
			char * cmd_param, int cmd_show)
	{
		${1}
		return 0;
	}

# DllMain()
snippet dllmain
	BOOL APIENTRY DllMain(HANDLE module, DWORD reason_for_call, LPVOID reserved)
	{
		switch (reason_for_call)
		{
		case DLL_PROCESS_ATTACH:${1}
			break;
		case DLL_THREAD_ATTACH:
			break;
		case DLL_THREAD_DETACH:
			break;
		case DLL_PROCESS_DETACH:
			break;
		}
		return TRUE;
	}

# #include <...>
snippet Inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet inc
	#include "${1:`Filename("$1")`}.h"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:/* code */}
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('_$1_H_', '_UNTITLED_H_'))`}
	#define $1

	${2}

	#endif /* $1 */

# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}; // struct $1
# Enum
snippet en
	enum ${1:name}
	{
		${2:/* data */}
	}; // enum $1
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	[${1}]${2}

